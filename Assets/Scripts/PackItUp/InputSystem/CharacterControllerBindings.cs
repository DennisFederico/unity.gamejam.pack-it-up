//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Configs/CharacterControllerBindings.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace PackItUp.InputSystem
{
    public partial class @CharacterControllerBindings: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CharacterControllerBindings()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharacterControllerBindings"",
    ""maps"": [
        {
            ""name"": ""P1Controls"",
            ""id"": ""86e4dea1-c8ba-456c-a35c-edc99091b9ed"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""bd1aaf22-66ea-429b-9e6c-d50d1e50c4bb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""da30b52f-0289-4753-a445-971424a69c4c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""70724e00-1f7e-47be-9458-696a871b144e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2feacd37-5ae7-4209-a682-910f85cfb3e7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3e185430-2cce-4373-8592-7780ba980bd6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c4fe82b7-cf00-4c22-a434-eb46fc72f4e7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // P1Controls
            m_P1Controls = asset.FindActionMap("P1Controls", throwIfNotFound: true);
            m_P1Controls_Move = m_P1Controls.FindAction("Move", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // P1Controls
        private readonly InputActionMap m_P1Controls;
        private List<IP1ControlsActions> m_P1ControlsActionsCallbackInterfaces = new List<IP1ControlsActions>();
        private readonly InputAction m_P1Controls_Move;
        public struct P1ControlsActions
        {
            private @CharacterControllerBindings m_Wrapper;
            public P1ControlsActions(@CharacterControllerBindings wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_P1Controls_Move;
            public InputActionMap Get() { return m_Wrapper.m_P1Controls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(P1ControlsActions set) { return set.Get(); }
            public void AddCallbacks(IP1ControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_P1ControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_P1ControlsActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }

            private void UnregisterCallbacks(IP1ControlsActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
            }

            public void RemoveCallbacks(IP1ControlsActions instance)
            {
                if (m_Wrapper.m_P1ControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IP1ControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_P1ControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_P1ControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public P1ControlsActions @P1Controls => new P1ControlsActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        public interface IP1ControlsActions
        {
            void OnMove(InputAction.CallbackContext context);
        }
    }
}
